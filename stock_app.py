# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import smtplib
from email.message import EmailMessage
import os

# CONFIGURATION G√âN√âRALE
st.set_page_config(page_title="üì¶ Suivi de Stock", layout="centered")
EMAIL = "moulaihcenewalidro@gmail.com"
APP_PASSWORD = "osva szaz sngc ljxa"

stock_file = "stock_initial_complet_avec_categorie.xlsx"
historique_file = "historique_journalier.xlsx"

# CHARGEMENT DES FICHIERS
if os.path.exists(stock_file):
    df_stock = pd.read_excel(stock_file)
else:
    df_stock = pd.DataFrame(columns=["Produit", "Code de Produit", "Lot", "Stock Initial (Kilos)",
                                     "Stock Initial R√©f√©rence (Kilos)", "Densit√©", "Cat√©gorie"])

if os.path.exists(historique_file):
    df_historique = pd.read_excel(historique_file)
else:
    df_historique = pd.DataFrame(columns=["Date", "Employ√©", "Client", "Fournisseur", "BL", "Produit", "Code de Produit",
                                          "Lot", "Unit√©", "Quantit√© Saisie", "Densit√©", "Quantit√© (Kilos)"])

# TRAITEMENTS PR√âLIMINAIRES
df_stock["Densit√©"] = pd.to_numeric(df_stock["Densit√©"], errors="coerce").fillna(1)
df_stock["Stock Initial (Kilos)"] = pd.to_numeric(df_stock["Stock Initial (Kilos)"], errors="coerce").fillna(0)
df_stock["Stock Initial R√©f√©rence (Kilos)"] = pd.to_numeric(df_stock["Stock Initial R√©f√©rence (Kilos)"], errors="coerce").fillna(0)
df_stock["Cat√©gorie"] = df_stock["Cat√©gorie"].astype(str)

# LISTES DYNAMIQUES
categories = sorted(df_stock["Cat√©gorie"].dropna().unique())
clients_default = [
    "Zentral", "R√©p√©rtoir culinaire UK", "FN", "Feuillette", "food choice", "TGT", "Kylian Blot", "RCL DUBAI",
    "Maison Landemaine", "OBERWEIS", "Maison B√©cam", "Back Europ", "Chef Robuchon", "EPGB", "Les secrets d'Honor√©",
    "R√©serve", "Landemaine", "Joel Robuchon", "mon pari gourmand", "Mazet", "Chocolaterie Pecq", "Farinier",
    "Dasita", "Becam", "Pole sud"
]
employes = ["Alexendre", "Asmaa", "Zahir", "Massinissa"]
fournisseurs = sorted(set(df_historique.get("Fournisseur", pd.Series()).dropna().tolist()) + ["Premium Good", "Ilanga"])

# INTERFACE
st.title("üì¶ Suivi de Stock ‚Äì Application Compl√®te")

cat = st.selectbox("üìÇ Cat√©gorie", categories)
df_filtered = df_stock[df_stock["Cat√©gorie"] == cat]
produits = sorted(df_filtered["Produit"].unique())
produit = st.selectbox("Produit *", produits)

lot = st.text_input("Num√©ro de Lot *")
unite = st.selectbox("Unit√© *", ["Kilo", "Litre"])
quantite = st.number_input("Quantit√© *", min_value=0.0, step=0.1)
bl = st.text_input("Code BL *")
expediteur = st.text_input("Nom de l'exp√©diteur", "Syst√®me de Stock")

employe = st.selectbox("Employ√©", employes + ["üîπ Nouveau..."])
if employe == "üîπ Nouveau...":
    employe = st.text_input("‚û°Ô∏è Saisir nouveau employ√©")

client = st.selectbox("Client", clients_default + ["üîπ Nouveau..."])
if client == "üîπ Nouveau...":
    client = st.text_input("‚û°Ô∏è Saisir nouveau client")

fournisseur = st.selectbox("Fournisseur", fournisseurs + ["üîπ Nouveau..."])
if fournisseur == "üîπ Nouveau...":
    fournisseur = st.text_input("‚û°Ô∏è Saisir nouveau fournisseur")

# Auto-remplissage code/densit√©
row_info = df_stock[df_stock["Produit"] == produit]
code = row_info["Code de Produit"].values[0] if not row_info.empty else ""
densite = row_info["Densit√©"].values[0] if not row_info.empty else 1
quantite_kilo = quantite * densite if unite == "Litre" else quantite

st.markdown(f"üîñ Code Produit : `{code}`")
st.markdown(f"üíß Densit√© : `{densite}`")

# EMAIL
def envoyer_email(sujet, contenu):
    msg = EmailMessage()
    msg["Subject"] = sujet
    msg["From"] = EMAIL
    msg["To"] = EMAIL
    msg.set_content(contenu)
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(EMAIL, APP_PASSWORD)
            smtp.send_message(msg)
    except Exception as e:
        st.error(f"Erreur email : {e}")

# ENREGISTREMENT
def enregistrer_mouvement(type_mvt):
    global df_stock, df_historique

    if not all([produit, lot, bl, quantite > 0]):
        st.warning("‚ö†Ô∏è Remplir tous les champs obligatoires (*)")
        return

    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    idx = df_stock[(df_stock["Produit"] == produit) & (df_stock["Lot"] == lot)].index

    if type_mvt == "Entr√©e":
        if not idx.empty:
            df_stock.at[idx[0], "Stock Initial (Kilos)"] += quantite_kilo
        else:
            ref = quantite_kilo
            cat_value = cat
            df_stock.loc[len(df_stock)] = [produit, code, lot, quantite_kilo, ref, densite, cat_value]
    else:
        if not idx.empty:
            stock = df_stock.at[idx[0], "Stock Initial (Kilos)"]
            if quantite_kilo > stock:
                st.error(f"‚ùå Stock insuffisant : {stock:.2f} kg disponible")
                return
            df_stock.at[idx[0], "Stock Initial (Kilos)"] -= quantite_kilo
            ref = df_stock.at[idx[0], "Stock Initial R√©f√©rence (Kilos)"]
            reste = stock - quantite_kilo
            pourcent = max(0, min((reste / ref) * 100, 100)) if ref > 0 else 0
            if pourcent <= 25:
                envoyer_email(f"‚ö†Ô∏è Stock bas - {produit} - Lot {lot}", f"Reste : {reste:.2f} kg ({pourcent:.1f}%)")
            if reste <= 0:
                envoyer_email(f"‚ùå Stock √©puis√© - {produit} - Lot {lot}", "Le stock est √† 0 kg.")
        else:
            st.error("‚ùå Produit ou lot introuvable.")
            return

    row = {
        "Date": now, "Employ√©": employe, "Client": client, "Fournisseur": fournisseur, "BL": bl,
        "Produit": produit, "Code de Produit": code, "Lot": lot,
        "Unit√©": unite, "Quantit√© Saisie": quantite, "Densit√©": densite, "Quantit√© (Kilos)": quantite_kilo
    }
    df_historique = pd.concat([df_historique, pd.DataFrame([row])], ignore_index=True)
    df_stock.to_excel(stock_file, index=False)
    df_historique.to_excel(historique_file, index=False)
    st.success(f"{type_mvt} enregistr√©e ‚úÖ")

# RAPPORT
def envoyer_rapport_journalier_excel():
    date_now = datetime.now().strftime("%Y-%m-%d")
    df_jour = df_historique[df_historique["Date"].astype(str).str.startswith(date_now)]
    if df_jour.empty:
        st.warning("Aucune donn√©e aujourd‚Äôhui.")
        return
    file_name = f"rapport_{date_now}.xlsx"
    df_jour.to_excel(file_name, index=False)
    msg = EmailMessage()
    msg["Subject"] = f"üìä Rapport du {date_now}"
    msg["From"] = EMAIL
    msg["To"] = EMAIL
    msg.set_content(f"Rapport du jour en pi√®ce jointe ‚Äì {expediteur}")
    with open(file_name, "rb") as f:
        msg.add_attachment(f.read(), maintype="application", subtype="octet-stream", filename=file_name)
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(EMAIL, APP_PASSWORD)
            smtp.send_message(msg)
        st.success("üì© Rapport Excel envoy√©")
    except Exception as e:
        st.error(f"Erreur email : {e}")

# BOUTONS PRINCIPAUX
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("‚úÖ Approvisionnement"):
        enregistrer_mouvement("Entr√©e")
with col2:
    if st.button("üì¶ Sortie"):
        enregistrer_mouvement("Sortie")
with col3:
    if st.button("üì§ Envoyer Rapport Excel"):
        envoyer_rapport_journalier_excel()

# GRAPHIQUE PAR LOT
st.markdown("---")
st.subheader("üìâ Suivi par Lot")
cat2 = st.selectbox("üîé Cat√©gorie", categories, key="lot_cat")
produits2 = df_stock[df_stock["Cat√©gorie"] == cat2]["Produit"].unique()
produit_sel = st.selectbox("Produit üéØ", produits2, key="lot_prod")
lots = df_stock[df_stock["Produit"] == produit_sel]["Lot"].unique()
lot_sel = st.selectbox("Lot üéØ", lots, key="lot_lot")

row = df_stock[(df_stock["Produit"] == produit_sel) & (df_stock["Lot"] == lot_sel)]
if not row.empty:
    stock = float(row["Stock Initial (Kilos)"].values[0])
    ref = float(row["Stock Initial R√©f√©rence (Kilos)"].values[0])
    pourcent = max(0, min((stock / ref) * 100, 100)) if ref > 0 else 0
    couleur = "green" if pourcent > 60 else "orange" if pourcent > 25 else "red"
    fig, ax = plt.subplots(figsize=(6, 2.5))
    bar = ax.barh([f"{produit_sel} - Lot {lot_sel}"], [pourcent], color=couleur)
    ax.set_xlim(0, 100)
    ax.set_xlabel("Stock (%)")
    ax.bar_label(bar, labels=[f"{pourcent:.1f}%\n{stock:.1f} kg / {ref:.1f} kg"], fontsize=10)
    st.pyplot(fig)

    if st.button("üóëÔ∏è Supprimer ce lot"):
        df_stock = df_stock[~((df_stock["Produit"] == produit_sel) & (df_stock["Lot"] == lot_sel))]
        df_stock.to_excel(stock_file, index=False)
        st.success("‚úÖ Lot supprim√© ‚Äì actualisez la page pour voir les changements.")

# R√âSUM√â FINAL
st.markdown("---")
st.subheader("üìã R√©sum√© Global des Stocks")
df_resume = df_stock.copy()
df_resume["% Stock"] = (df_resume["Stock Initial (Kilos)"] / df_resume["Stock Initial R√©f√©rence (Kilos)"]).replace([float("inf"), -float("inf")], 0) * 100
df_resume["% Stock"] = df_resume["% Stock"].fillna(0).round(1).clip(lower=0, upper=100)
df_resume["Stock Initial (Kilos)"] = df_resume["Stock Initial (Kilos)"].apply(lambda x: max(0, x))
st.dataframe(df_resume[["Produit", "Lot", "Stock Initial (Kilos)", "Stock Initial R√©f√©rence (Kilos)", "% Stock"]])
